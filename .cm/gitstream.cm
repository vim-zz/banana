# -*- mode: yaml -*-

manifest:
  version: 1.0

# Define condition under the `checks` section, each check consists of
# an expression. The checks results are evalauated and used as conditions
# for the next section `automations`.
# Checks expressions are wrapped with double curly braces and includes a
# context variable like `files` and filter like `length`.
# Filters are essentially functions that can be applied to variables. They
# are called with a pipe operator (|) and can take arguments.
checks:
  deprecated:
    in:
      resource_manager: {{ files | filter(regex=r/app\/ResourceManager\//) | length > 0 }}
      managers: {{ files | filter(regex=r/app\/Managers\//) | length > 0 }}
      repositories: {{ files | filter(regex=r/app\/Repositories\//) | length > 0 }}
      services: {{ files | filter(regex=r/app\/Services\//) | length > 0 }}
  change:
    is:
      formatting_only: {{ source.diff.files | allFormattingChange }}
  filetypes:
    is:
      docs: {{ files | allDocs }}

# The `automations` section include the list of automation that applies
# for the repo in which gitStream is installed.
# Each automation has `if` key with a list of the necessary condtions and
# a `run` key with a list of all actions. All the listed condtions need to
# pass in order for the following actions to be executed.
automations:
  label_deprecated_pr:
    if:
      - {{ checks.deprecated.in.resource_manager or checks.deprecated.in.managers or checks.deprecated.in.repositories }}
    run:
      - action : add-labels@v1
        args:
          labels: ['deprecated']
  mark_formatting:
    if:
      - {{ checks.change.is.formatting_only }}
    run:
      - action : add-labels@v1
        args:
          labels: ['formatting-only']
  mark_docs:
    if:
      - {{ checks.filetypes.is.docs }}
    run:
      - action : add-labels@v1
        args:
          labels: ['docs-only']
          